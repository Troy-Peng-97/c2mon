# These are placed here to allow the ${} placeholders to be resolved by Spring.
# Unfortunately we cannot use placeholders directly in our classes annotated
# with @ConfigurationProperties, as it doesn't support SpEL evaluation (see
# https://github.com/spring-projects/spring-boot/issues/1768).
c2mon.domain=c2mon
c2mon.client.jms.url=tcp://0.0.0.0:61616
c2mon.client.jms.alarmTopic = ${c2mon.domain}.client.alarm
c2mon.client.jms.alarmWithTagTopic = ${c2mon.domain}.client.alarmWithTagTopic
c2mon.client.jms.controlTagTopic = ${c2mon.domain}.client.controltag
c2mon.client.jms.supervisionTopic = ${c2mon.domain}.client.supervision
c2mon.client.jms.heartbeatTopic = ${c2mon.domain}.client.heartbeat
c2mon.client.jms.requestQueue = ${c2mon.domain}.client.request
c2mon.client.jms.configRequestQueue = ${c2mon.domain}.client.config
c2mon.client.jms.adminRequestQueue = ${c2mon.domain}.client.admin
c2mon.client.dynconfig.active = false

c2mon.client.dynconfig.mappings[0].processID:1001
c2mon.client.dynconfig.mappings[0].processName: P_DYNDIP
c2mon.client.dynconfig.mappings[0].equipmentName: E_DYNDIP
c2mon.client.dynconfig.mappings[0].processDescription: DIP test process
c2mon.client.dynconfig.mappings[0].equipmentDescription: DIP test equipment
c2mon.client.dynconfig.mappings[0].uriPattern: ^dip.*

c2mon.client.dynconfig.mappings[1].processID:10002
c2mon.client.dynconfig.mappings[1].processName: P_DYNOPCUA
c2mon.client.dynconfig.mappings[1].equipmentName: E_OPCUA
c2mon.client.dynconfig.mappings[1].processDescription: OPC UA test process
c2mon.client.dynconfig.mappings[1].equipmentDescription: OPC UA test equipment
c2mon.client.dynconfig.mappings[1].uriPattern: ^opc.tcp.*
